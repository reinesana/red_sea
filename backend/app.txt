Description: calculates danger score based on event type and # of fatalities, which is then stored in gaza_danger_levels.csv



from sklearn.neighbors import KNeighborsClassifier
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import make_pipeline
import numpy as np
import requests
import pandas as pd
import math
import requests


app = Flask(__name__)

# Getting conflict zones and assigning a danger level
df = pd.read_csv('/Users/shanakesia/Desktop/CMPT/cmd-f-2024-pre-hackathon/backend/datasets/gaza_strip_conflicts.csv')

# Dictionary of danger levels: 5-most dangerous, 1-safe
event_danger_map = { 
    "Battles": 5,
    "Explosions/Remote violence": 4,
    "Violence against civilians": 3,
    "Riots": 2,
    "Strategic developments": 4,
    "Protests": 2
}

fatality_map = {
    0: 1,          
    1: 1,        
    2: 2,         
    3: 2,         
    4: 3,          
    5: 3,        
    6: 4,          
    7: 4,         
    8: 4,  
}

fatality_map.update({key: 5 for key in range(9, 100)})
df['event_danger_level'] = df['EVENT_TYPE'].map(event_danger_map)
df['fatality_danger_level'] = df['FATALITIES'].map(fatality_map)

def calculate_overall_danger_level(row):
    overall_danger_level = 0.6 * row['event_danger_level'] + 0.4 * row['fatality_danger_level']
    return overall_danger_level
